# events {
#     worker_connections 1024;
# }

upstream app_servers {
    server app:8080;
}

map $http_origin $allowed_origin {
    default "";
    "http://localhost:63342" $http_origin; # 현재는 클라이언트 직접 지정해서 사용. 실제 환경에선 API 서버 Security에 CORS 설정이 되어 있어서 불필요(아마도)
}

server {
    listen 80;
    listen [::]:80;

    server_name localhost;
    error_log /var/log/nginx/error.log debug;

    # 백엔드에서 설정한 CORS 헤더 제거
    proxy_hide_header 'Access-Control-Allow-Origin';
    proxy_hide_header 'Access-Control-Allow-Credentials';

#     # 공통 CORS 설정
#     set $cors '';
#     if ($allowed_origin != '') {
#         set $cors 'true';
#     }

    location /chat {
        if ($request_method = 'OPTIONS') {
             add_header 'Access-Control-Allow-Origin' $allowed_origin always;
             add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, PATCH, OPTIONS' always;
             add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
             add_header 'Access-Control-Allow-Credentials' 'true' always;
             return 204;
        }

        proxy_pass http://app_servers;
        proxy_http_version 1.1; # WebSocket 연결은 HTTP/1.1 이상으로 연결해야 함

        add_header 'Access-Control-Allow-Origin' $allowed_origin always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        # WebSocket 연결을 위한 설정
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $http_host;
        proxy_set_header Origin "http://127.0.0.1:8000"; # Origin 헤더 제거 안 하면, 계속 CORS 에러 발생

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /ws {
        if ($request_method = 'OPTIONS') {
             add_header 'Access-Control-Allow-Origin' $allowed_origin always;
             add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, PATCH, OPTIONS' always;
             add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
             add_header 'Access-Control-Allow-Credentials' 'true' always;
             return 204;
        }

        proxy_pass http://app_servers;
        proxy_http_version 1.1;

        add_header 'Access-Control-Allow-Origin' $allowed_origin always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

#     location /chat/info {
#          # SockJS를 사용하면 초기에 GET /info 요청으로 서버 기본 정보(WebSocket 지원 여부, Cookie 사용 여부, CORS Origin 정보)를 확인
#          # 이후에 ws 요청은 chat server로 보내지만, 해당 요청은 API에서 처리 (인증 처리를 위한 검증을 위해)
#         if ($request_method = 'OPTIONS') {
#              add_header 'Access-Control-Allow-Origin' $allowed_origin always;
#              add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, PATCH, OPTIONS' always;
#              add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
#              add_header 'Access-Control-Allow-Credentials' 'true' always;
#              return 204;
#         }
#
#         rewrite ^/chat/(.*) /ws/$1 break;
#
#         proxy_pass http://app_servers;
#         proxy_http_version 1.1;
#
# #         if ($cors = 'true') {
#         add_header 'Access-Control-Allow-Origin' $allowed_origin always;
#         add_header 'Access-Control-Allow-Credentials' 'true' always;
# #         }
#
#         proxy_set_header Host $http_host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#     }
}
